{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "426b0573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 532.8x439.2 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure to '../figures/Rainfall_time_mean.pdf'...\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "#!/bin/env python \n",
    "\n",
    "import scipy.stats\n",
    "import numpy as np ; import numpy.ma as ma\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "from netCDF4 import Dataset\n",
    "import netCDF4\n",
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt, numpy as np\n",
    "from matplotlib.colors import BoundaryNorm\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeat\n",
    "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
    "import sys, glob, os, re\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "#----------function allowing to save high-quality figures in different formats---------- \n",
    "def save(path, ext='png', close=True, verbose=True):\n",
    "    \"\"\"Save a figure from pyplot.\n",
    "    Parameters\n",
    "    ----------\n",
    "    path : string\n",
    "    The path (and filename, without the extension) to save the\n",
    "    figure to.\n",
    "    ext : string (default='png')\n",
    "    The file extension. This must be supported by the active\n",
    "    matplotlib backend (see matplotlib.backends module).  Most\n",
    "    backends support 'png', 'pdf', 'ps', 'eps', and 'svg'.\n",
    "    close : boolean (default=True)\n",
    "    Whether to close the figure after saving.  If you want to save\n",
    "    the figure multiple times (e.g., to multiple formats), you\n",
    "    should NOT close it in between saves or you will have to\n",
    "    re-plot it.\n",
    "    verbose : boolean (default=True)\n",
    "    whether to print information about when and where the image\n",
    "    has been saved.\n",
    "    \"\"\"\n",
    "    # Extract the directory and filename from the given path\n",
    "    directory = os.path.split(path)[0]\n",
    "    filename = \"%s.%s\" % (os.path.split(path)[1], ext)\n",
    "    if directory == '':\n",
    "       directory = '.'\n",
    "    #If the directory does not exist, create it\n",
    "    if not os.path.exists(directory):\n",
    "        os.makedirs(directory)\n",
    "    # The final path to save to\n",
    "    savepath = os.path.join(directory, filename)\n",
    "    if verbose:\n",
    "        print(\"Saving figure to '%s'...\" % savepath),\n",
    "    # Actually save the figure\n",
    "    plt.savefig(savepath)\n",
    "    # Close it\n",
    "    if close:\n",
    "        plt.close()\n",
    "    if verbose:\n",
    "        print(\"Done\")\n",
    "\n",
    "##########################################################################################\n",
    "\n",
    "#--------Here let's read the different netDF files corresponding to four seasons--------- \n",
    "\n",
    "#--------climatology--------- \n",
    "ncfile0 = Dataset('Temp.nc', 'r', format='NETCDF4')\n",
    "pr_djf = np.array(ncfile0.variables['tmean'][:,:,:]) \n",
    "lat = np.array(ncfile0.variables['lat'][:])\n",
    "lon = np.array(ncfile0.variables['lon'][:])\n",
    "time = ncfile0.variables['time']\n",
    "ncfile0.close()\n",
    "\n",
    "##############################compute mean for all seasons####################################\n",
    "pr_djf = np.mean(pr_djf,axis=0)  \n",
    "pr_djf\n",
    "\n",
    "#=========================Map resources==============================\n",
    "fig = plt.figure(figsize=(7.40,6.10))\n",
    "kwargs = {'format': '%.0f'}  # to fix decimals at X numbers after - put **kwargs in plt.cbar \n",
    "[lon2d, lat2d] = np.meshgrid(lon, lat)\n",
    "\n",
    "\n",
    "prj = ccrs.PlateCarree(central_longitude=0.0)\n",
    "\n",
    "axa = plt.subplot(111, projection=prj)\n",
    "axa.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axa.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axa.coastlines(resolution='10m',linewidth=0.5);\n",
    "axa.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "axa.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_djf,levels = np.arange(17., 25.,1),cmap=plt.cm.jet)\n",
    "axa.set_extent([28 ,31, -3, -1])\n",
    "axa.set_xticks(range(28,31,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "axa.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axa.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('a) CHIRTS: TEMPERATURE CLIMATOLOGY', fontsize=8)\n",
    "plt.ylabel('')\n",
    "cb0 = plt.colorbar ( cs1, ax = axa,orientation ='vertical' )\n",
    "\n",
    "cb0.set_label('[deg C]',rotation=270) \n",
    "\n",
    "plt.show()\n",
    "filout = \"temperature.png\"\n",
    "fig.savefig(filout,dpi=300) ; plt.close()\n",
    "\n",
    "\n",
    "save('../figures/Rainfall_time_mean', ext='pdf', close=True, verbose=True)  # save high quality figures\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df2919b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 532.8x439.2 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure to '../figures/Rainfall_all_seasons.pdf'...\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "#!/bin/env python \n",
    "\n",
    "import scipy.stats\n",
    "import numpy as np ; import numpy.ma as ma\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "from netCDF4 import Dataset\n",
    "import netCDF4\n",
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt, numpy as np\n",
    "from matplotlib.colors import BoundaryNorm\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeat\n",
    "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
    "import sys, glob, os, re\n",
    "\n",
    "#----------function allowing to save high-quality figures in different formtats---------- \n",
    "def save(path, ext='png', close=True, verbose=True):\n",
    "    \"\"\"Save a figure from pyplot.\n",
    "    Parameters\n",
    "    ----------\n",
    "    path : string\n",
    "    The path (and filename, without the extension) to save the\n",
    "    figure to.\n",
    "    ext : string (default='png')\n",
    "    The file extension. This must be supported by the active\n",
    "    matplotlib backend (see matplotlib.backends module).  Most\n",
    "    backends support 'png', 'pdf', 'ps', 'eps', and 'svg'.\n",
    "    close : boolean (default=True)\n",
    "    Whether to close the figure after saving.  If you want to save\n",
    "    the figure multiple times (e.g., to multiple formats), you\n",
    "    should NOT close it in between saves or you will have to\n",
    "    re-plot it.\n",
    "    verbose : boolean (default=True)\n",
    "    whether to print information about when and where the image\n",
    "    has been saved.\n",
    "    \"\"\"\n",
    "    # Extract the directory and filename from the given path\n",
    "    directory = os.path.split(path)[0]\n",
    "    filename = \"%s.%s\" % (os.path.split(path)[1], ext)\n",
    "    if directory == '':\n",
    "       directory = '.'\n",
    "    #If the directory does not exist, create it\n",
    "    if not os.path.exists(directory):\n",
    "        os.makedirs(directory)\n",
    "    # The final path to save to\n",
    "    savepath = os.path.join(directory, filename)\n",
    "    if verbose:\n",
    "        print(\"Saving figure to '%s'...\" % savepath),\n",
    "    # Actually save the figure\n",
    "    plt.savefig(savepath)\n",
    "    # Close it\n",
    "    if close:\n",
    "        plt.close()\n",
    "    if verbose:\n",
    "        print(\"Done\")\n",
    "\n",
    "##########################################################################################\n",
    "\n",
    "#--------Here let's read the different netDF files corresponding to four seasons--------- \n",
    "\n",
    "#--------DJF season--------- \n",
    "ncfile0 = Dataset('djf.nc', 'r', format='NETCDF4')\n",
    "pr_djf = ncfile0.variables['tmean'][:,:,:] \n",
    "lat = np.array(ncfile0.variables['lat'][:])\n",
    "lon = np.array(ncfile0.variables['lon'][:])\n",
    "time = ncfile0.variables['time']\n",
    "ncfile0.close()\n",
    "\n",
    "#--------MAM season--------- \n",
    "ncfile1 = Dataset('mam.nc', 'r', format='NETCDF4')\n",
    "pr_mam = ncfile1.variables['tmean'][:,:,:]\n",
    "lat = np.array(ncfile0.variables['lat'][:])\n",
    "lon = np.array(ncfile0.variables['lon'][:])\n",
    "#time = ncfile1.variables['time']\n",
    "ncfile1.close()\n",
    "\n",
    "#--------JJA season--------- \n",
    "ncfile2 = Dataset('jja.nc', 'r', format='NETCDF4')\n",
    "pr_jja = ncfile2.variables['tmean'][:,:,:]\n",
    "lat = np.array(ncfile0.variables['lat'][:])\n",
    "lon = np.array(ncfile0.variables['lon'][:])\n",
    "#time = ncfile2.variables['time']\n",
    "ncfile2.close()\n",
    "\n",
    "#--------SON season--------- \n",
    "ncfile3 = Dataset('son.nc', 'r', format='NETCDF4')\n",
    "pr_son = ncfile3.variables['tmean'][:,:,:]\n",
    "lat = np.array(ncfile0.variables['lat'][:])\n",
    "lon = np.array(ncfile0.variables['lon'][:])\n",
    "#time = ncfile3.variables['time']\n",
    "ncfile3.close()\n",
    "\n",
    "\n",
    "##############################compute mean for all seasons####################################\n",
    "pr_djf = np.mean(pr_djf,axis=0)  \n",
    "pr_mam = np.mean(pr_mam,axis=0)  \n",
    "pr_jja = np.mean(pr_jja,axis=0)  \n",
    "pr_son = np.mean(pr_son,axis=0)  \n",
    "\n",
    "#=========================ressources pour la carte: cartopy à installer au préalable==============================\n",
    "fig = plt.figure(figsize=(7.40,6.10))\n",
    "kwargs = {'format': '%.0f'}  # to fix decimals at X numbers after - put **kwargs in plt.cbar \n",
    "[lon2d, lat2d] = np.meshgrid(lon, lat)\n",
    "\n",
    "\n",
    "prj = ccrs.PlateCarree(central_longitude=0.0)\n",
    "\n",
    "axa = plt.subplot(221, projection=prj)\n",
    "#axa.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axa.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axa.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axa.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axa.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_djf,levels = np.arange(17., 27.,2),cmap=plt.cm.jet)\n",
    "axa.set_extent([28.8 ,30.8, -3, -1])\n",
    "axa.set_xticks(range(28,30,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "#axa.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axa.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('a) DJF TEMPERATURE', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axa,orientation ='horizontal' )\n",
    "\n",
    "axb = plt.subplot(222, projection=prj)\n",
    "#axb.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axb.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axb.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axb.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axb.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_mam,levels = np.arange(17., 27.,2),cmap=plt.cm.jet)\n",
    "axa.set_extent([28 ,31, -3, -1])\n",
    "axa.set_xticks(range(28,31,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "axb.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axb.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('b) MAM TEMPERATURE', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axb,orientation ='horizontal' )\n",
    "\n",
    "axc = plt.subplot(223, projection=prj)\n",
    "#axc.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axc.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axc.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axc.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axc.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "csc = plt.contourf(lon2d,lat2d,pr_jja,levels = np.arange(17., 27.,2),cmap=plt.cm.jet)\n",
    "axb.set_extent([28 ,31, -3, -1])\n",
    "axb.set_xticks(range(28,31,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "axc.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axc.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('c) JJA TEMPERATURE', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( csc, ax = axc,orientation ='horizontal' )\n",
    "\n",
    "axd = plt.subplot(224, projection=prj)\n",
    "#axd.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axd.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axd.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axd.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axd.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_son,levels = np.arange(17., 27.,1),cmap=plt.cm.jet)\n",
    "axa.set_extent([28 ,31, -3, -1])\n",
    "axa.set_xticks(range(28,31,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "axd.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axd.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('d) SON TEMPERATURE', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axd,orientation ='horizontal' )\n",
    "\n",
    "\n",
    "axtop = axa.get_position()\n",
    "axbot = axd.get_position()\n",
    "\n",
    "cbar_ax = fig.add_axes([axbot.x1+0.075, axbot.y0, 0.010, axtop.y1-axbot.y0])\n",
    "cbar = plt.colorbar(csc, cax=cbar_ax, orientation='vertical',**kwargs)\n",
    "cbar.set_label('[deg C]',rotation=270,labelpad=10) \n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n",
    "\n",
    "save('../figures/Rainfall_all_seasons', ext='pdf', close=True, verbose=True)  # save high quality figures\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8a776bd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "##### Precipitation#############"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "86a877b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 532.8x439.2 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#!/bin/env python \n",
    "\n",
    "import scipy.stats\n",
    "import numpy as np ; import numpy.ma as ma\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "from netCDF4 import Dataset\n",
    "import netCDF4\n",
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt, numpy as np\n",
    "from matplotlib.colors import BoundaryNorm\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeat\n",
    "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
    "import sys, glob, os, re\n",
    "\n",
    "#----------function allowing to save high-quality figures in different formats---------- \n",
    "def save(path, ext='png', close=True, verbose=True):\n",
    "    \"\"\"Save a figure from pyplot.\n",
    "    Parameters\n",
    "    ----------\n",
    "    path : string\n",
    "    The path (and filename, without the extension) to save the\n",
    "    figure to.\n",
    "    ext : string (default='png')\n",
    "    The file extension. This must be supported by the active\n",
    "    matplotlib backend (see matplotlib.backends module).  Most\n",
    "    backends support 'png', 'pdf', 'ps', 'eps', and 'svg'.\n",
    "    close : boolean (default=True)\n",
    "    Whether to close the figure after saving.  If you want to save\n",
    "    the figure multiple times (e.g., to multiple formats), you\n",
    "    should NOT close it in between saves or you will have to\n",
    "    re-plot it.\n",
    "    verbose : boolean (default=True)\n",
    "    whether to print information about when and where the image\n",
    "    has been saved.\n",
    "    \"\"\"\n",
    "    # Extract the directory and filename from the given path\n",
    "    directory = os.path.split(path)[0]\n",
    "    filename = \"%s.%s\" % (os.path.split(path)[1], ext)\n",
    "    if directory == '':\n",
    "       directory = '.'\n",
    "    #If the directory does not exist, create it\n",
    "    if not os.path.exists(directory):\n",
    "        os.makedirs(directory)\n",
    "    # The final path to save to\n",
    "    savepath = os.path.join(directory, filename)\n",
    "    if verbose:\n",
    "        print(\"Saving figure to '%s'...\" % savepath),\n",
    "    # Actually save the figure\n",
    "    plt.savefig(savepath)\n",
    "    # Close it\n",
    "    if close:\n",
    "        plt.close()\n",
    "    if verbose:\n",
    "        print(\"Done\")\n",
    "\n",
    "#----------directory where the data are stored------------------------------------------- \n",
    "path = '/home/enock/Desktop/you'\n",
    "\n",
    "##########################################################################################\n",
    "\n",
    "#--------Here let's read the different netDF files corresponding to four seasons--------- \n",
    "\n",
    "#--------DJF season--------- \n",
    "ncfile0 = Dataset(path + '/Pre.nc', 'r', format='NETCDF4')\n",
    "pr_djf = ncfile0.variables['precip'][:,:,:] # MULTIPLY BY 86400 TO CONVERT TO MM/DAY\n",
    "lat = ncfile0.variables['latitude'][:]\n",
    "lon = ncfile0.variables['longitude'][:]\n",
    "time = ncfile0.variables['time']\n",
    "ncfile0.close()\n",
    "\n",
    "##############################compute mean for all seasons####################################\n",
    "pr_djf = np.mean(pr_djf,axis=0)  \n",
    "pr_djf\n",
    "#-------mask precipitation below 1 mm/day\n",
    "pr_djf = ma.masked_where(pr_djf <= 0.3, pr_djf)\n",
    "\n",
    "#=========================Map resources==============================\n",
    "fig = plt.figure(figsize=(7.40,6.10))\n",
    "kwargs = {'format': '%.0f'}  # to fix decimals at X numbers after - put **kwargs in plt.cbar \n",
    "[lon2d, lat2d] = np.meshgrid(lon, lat)\n",
    "\n",
    "\n",
    "prj = ccrs.PlateCarree(central_longitude=0.0)\n",
    "\n",
    "axa = plt.subplot(111, projection=prj)\n",
    "axa.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axa.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axa.coastlines(resolution='10m',linewidth=0.5);\n",
    "axa.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "axa.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_djf,levels = np.linspace(1., 8.,11),cmap=plt.cm.rainbow)\n",
    "axa.set_extent([28 ,31, -3, -1])\n",
    "axa.set_xticks(range(28,31,1), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "axa.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axa.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('a) CRU: RAINFALL CLIMATOLOGY', fontsize=8)\n",
    "plt.ylabel('')\n",
    "cb0 = plt.colorbar ( cs1, ax = axa,orientation ='vertical' )\n",
    "\n",
    "cb0.set_label('[mm/day]',rotation=270) \n",
    "\n",
    "\n",
    "\n",
    "#save('../figures/Rainfall_time_mean', ext='pdf', close=True, verbose=True)  # save high quality figures\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23e6cb19",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "11b999a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 532.8x439.2 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#!/bin/env python \n",
    "\n",
    "import scipy.stats\n",
    "import numpy as np ; import numpy.ma as ma\n",
    "import scipy.stats\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "from netCDF4 import Dataset\n",
    "import netCDF4\n",
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt, numpy as np\n",
    "from matplotlib.colors import BoundaryNorm\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeat\n",
    "from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n",
    "import sys, glob, os, re\n",
    "\n",
    "#----------function allowing to save high-quality figures in different formtats---------- \n",
    "def save(path, ext='png', close=True, verbose=True):\n",
    "    \"\"\"Save a figure from pyplot.\n",
    "    Parameters\n",
    "    ----------\n",
    "    path : string\n",
    "    The path (and filename, without the extension) to save the\n",
    "    figure to.\n",
    "    ext : string (default='png')\n",
    "    The file extension. This must be supported by the active\n",
    "    matplotlib backend (see matplotlib.backends module).  Most\n",
    "    backends support 'png', 'pdf', 'ps', 'eps', and 'svg'.\n",
    "    close : boolean (default=True)\n",
    "    Whether to close the figure after saving.  If you want to save\n",
    "    the figure multiple times (e.g., to multiple formats), you\n",
    "    should NOT close it in between saves or you will have to\n",
    "    re-plot it.\n",
    "    verbose : boolean (default=True)\n",
    "    whether to print information about when and where the image\n",
    "    has been saved.\n",
    "    \"\"\"\n",
    "    # Extract the directory and filename from the given path\n",
    "    directory = os.path.split(path)[0]\n",
    "    filename = \"%s.%s\" % (os.path.split(path)[1], ext)\n",
    "    if directory == '':\n",
    "       directory = '.'\n",
    "    #If the directory does not exist, create it\n",
    "    if not os.path.exists(directory):\n",
    "        os.makedirs(directory)\n",
    "    # The final path to save to\n",
    "    savepath = os.path.join(directory, filename)\n",
    "    if verbose:\n",
    "        print(\"Saving figure to '%s'...\" % savepath),\n",
    "    # Actually save the figure\n",
    "    plt.savefig(savepath)\n",
    "    # Close it\n",
    "    if close:\n",
    "        plt.close()\n",
    "    if verbose:\n",
    "        print(\"Done\")\n",
    "\n",
    "#----------directory where the data are stored------------------------------------------- \n",
    "path = '/home/enock/Desktop/you'\n",
    "\n",
    "##########################################################################################\n",
    "\n",
    "#--------Here let's read the different netDF files corresponding to four seasons--------- \n",
    "\n",
    "#--------DJF season--------- \n",
    "ncfile0 = Dataset(path + '/Djf.nc', 'r', format='NETCDF4')\n",
    "pr_djf = ncfile0.variables['precip'][:,:,:] # MULTIPLY BY 86400 TO CONVERT TO MM/DAY\n",
    "lat = ncfile0.variables['latitude'][:]\n",
    "lon = ncfile0.variables['longitude'][:]\n",
    "time = ncfile0.variables['time']\n",
    "ncfile0.close()\n",
    "\n",
    "#--------MAM season--------- \n",
    "ncfile1 = Dataset(path + '/Mam.nc', 'r', format='NETCDF4')\n",
    "pr_mam = ncfile1.variables['precip'][:,:,:] # MULTIPLY BY 86400 TO CONVERT TO MM/DAY\n",
    "lat = ncfile1.variables['latitude'][:]\n",
    "lon = ncfile1.variables['longitude'][:]\n",
    "#time = ncfile1.variables['time']\n",
    "ncfile1.close()\n",
    "\n",
    "#--------JJA season--------- \n",
    "ncfile2 = Dataset(path + '/Jja.nc', 'r', format='NETCDF4')\n",
    "pr_jja = ncfile2.variables['precip'][:,:,:] # MULTIPLY BY 86400 TO CONVERT TO MM/DAY\n",
    "lat = ncfile2.variables['latitude'][:]\n",
    "lon = ncfile2.variables['longitude'][:]\n",
    "#time = ncfile2.variables['time']\n",
    "ncfile2.close()\n",
    "\n",
    "#--------SON season--------- \n",
    "ncfile3 = Dataset(path + '/Son.nc', 'r', format='NETCDF4')\n",
    "pr_son = ncfile3.variables['precip'][:,:,:] # MULTIPLY BY 86400 TO CONVERT TO MM/DAY\n",
    "lat = ncfile3.variables['latitude'][:]\n",
    "lon = ncfile3.variables['longitude'][:]\n",
    "#time = ncfile3.variables['time']\n",
    "ncfile3.close()\n",
    "\n",
    "\n",
    "##############################compute mean for all seasons####################################\n",
    "pr_djf = np.mean(pr_djf,axis=0)  \n",
    "pr_mam = np.mean(pr_mam,axis=0)  \n",
    "pr_jja = np.mean(pr_jja,axis=0)  \n",
    "pr_son = np.mean(pr_son,axis=0)  \n",
    "\n",
    "pr_djf = ma.masked_where(pr_djf <= 1., pr_djf)\n",
    "pr_mam = ma.masked_where(pr_mam <= 1., pr_mam)\n",
    "pr_jja = ma.masked_where(pr_jja <= 1., pr_jja)\n",
    "pr_son = ma.masked_where(pr_son <= 1., pr_son)\n",
    "\n",
    "#=========================ressources pour la carte: cartopy à installer au préalable==============================\n",
    "fig = plt.figure(figsize=(7.40,6.10))\n",
    "kwargs = {'format': '%.0f'}  # to fix decimals at X numbers after - put **kwargs in plt.cbar \n",
    "[lon2d, lat2d] = np.meshgrid(lon, lat)\n",
    "\n",
    "\n",
    "prj = ccrs.PlateCarree(central_longitude=0.0)\n",
    "\n",
    "axa = plt.subplot(221, projection=prj)\n",
    "#axa.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axa.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axa.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axa.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axa.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_djf,levels = np.linspace(1., 10.,11),cmap=plt.cm.rainbow)\n",
    "axa.set_extent([28 ,31, -3, -1])\n",
    "#axa.set_xticks(range(-25,60,15), crs=prj)\n",
    "axa.set_yticks(range(-3,-1,1), crs=prj)\n",
    "#axa.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axa.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('a) DJF RAINFALL', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axa,orientation ='horizontal' )\n",
    "\n",
    "axb = plt.subplot(222, projection=prj)\n",
    "#axb.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axb.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axb.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axb.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axb.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_mam,levels = np.linspace(0., 10.,11),cmap=plt.cm.rainbow)\n",
    "axb.set_extent([28 ,31, -3, -1])\n",
    "#axb.set_xticks(range(-25,60,15), crs=prj)\n",
    "axb.set_yticks(range(-3,-1,15), crs=prj)\n",
    "axb.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axb.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('b) MAM RAINFALL', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axb,orientation ='horizontal' )\n",
    "\n",
    "axc = plt.subplot(223, projection=prj)\n",
    "#axc.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axc.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axc.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axc.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axc.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "csc = plt.contourf(lon2d,lat2d,pr_jja,levels = np.linspace(1.,10.,11),cmap=plt.cm.rainbow)\n",
    "axc.set_extent([28 ,31, -3, -1])\n",
    "axc.set_xticks(range(28,31,15), crs=prj)\n",
    "axc.set_yticks(range(-3,-1,15), crs=prj)\n",
    "axc.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axc.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('c) JJA RAINFALL', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( csc, ax = axc,orientation ='horizontal' )\n",
    "\n",
    "axd = plt.subplot(224, projection=prj)\n",
    "#axd.add_feature(cfeat.COASTLINE ,edgecolor = 'k')\n",
    "axd.add_feature(cfeat.BORDERS.with_scale('10m'),linewidth=0.5)\n",
    "axd.coastlines(resolution='10m',linewidth=0.5);\n",
    "#axd.add_feature(cfeat.BORDERS, linestyle='-', alpha=.5)\n",
    "#axd.add_feature(cfeat.OCEAN,edgecolor='k',facecolor='w') # to mask ocean\n",
    "cs1 = plt.contourf(lon2d,lat2d,pr_son,levels = np.linspace(0., 10.,11),cmap=plt.cm.rainbow)\n",
    "axd.set_extent([28 ,31, -3, -1])\n",
    "axd.set_xticks(range(28,31,15), crs=prj)\n",
    "axd.set_yticks(range(-3,-1,15), crs=prj)\n",
    "axd.xaxis.set_major_formatter(LONGITUDE_FORMATTER)\n",
    "axd.yaxis.set_major_formatter(LATITUDE_FORMATTER)\n",
    "plt.title('d) SON RAINFALL', fontsize=8)\n",
    "plt.ylabel('')\n",
    "#cb0 = plt.colorbar ( cs1, ax = axd,orientation ='horizontal' )\n",
    "\n",
    "\n",
    "axtop = axa.get_position()\n",
    "axbot = axd.get_position()\n",
    "\n",
    "cbar_ax = fig.add_axes([axbot.x1+0.075, axbot.y0, 0.020, axtop.y1-axbot.y0])\n",
    "cbar = plt.colorbar(csc, cax=cbar_ax, orientation='vertical',**kwargs)\n",
    "cbar.set_label('[mm/day]',rotation=270) \n",
    "plt.tight_layout()\n",
    "\n",
    "\n",
    "\n",
    "#save('../figures/Rainfall_all_seasons', ext='pdf', close=True, verbose=True)  # save high quality figures\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d54f6d5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
